<?php

use App\Domain\User\User;
use App\Infrastructure\Persistence\User\UserRepository;
use App\Service\EmailService;
use App\Service\TokenGeneratorService;
use App\Service\UserEmailService;
use Behat\Behat\Tester\Exception\PendingException;
use Behat\Behat\Context\Context;
use Behat\Gherkin\Node\PyStringNode;
use Behat\Gherkin\Node\TableNode;

/**
 * Defines application features from the specific context.
 */
class ApiContext implements Context
{
    /**
     * @var User
     */
    private $user;

    /**
     * @var UserEmailService
     */
    private $userService;

    /**
     * @var TokenGeneratorService
     */
    private $tokenService;

    /**
     * @var UserRepository
     */
    private $userRepository;

    /**
     * @var EmailService
     */
    private $emailService;

    /**
     * @var User
     */
    private $registrationResponse;

    /**
     * Initializes context.
     *
     * Every scenario gets its own context instance.
     * You can also pass arbitrary arguments to the
     * context constructor through behat.yml.
     * @param EmailService $emailService
     * @param UserEmailService $userService
     * @param UserRepository $userRepository
     * @param TokenGeneratorService $tokenService
     */
    public function __construct(
        EmailService $emailService,
        UserEmailService $userService,
        UserRepository $userRepository,
        TokenGeneratorService $tokenService
    )
    {
        $this->userService = $userService;
        $this->emailService = $emailService;
        $this->tokenService = $tokenService;
        $this->userRepository = $userRepository;
    }

    /**
     * @Given there is user information provided as json :jsonUser
     * @param string $jsonUser
     */
    public function thereIsUserInformationProvidedAsJson(string $jsonUser)
    {
        $user = json_decode($jsonUser);
        $this->user = new User($user->email, $user->password);
    }

    /**
     * @Then Email should be a valid email address
     */
    public function emailShouldBeAValidEmailAddress()
    {
        PHPUnit\Framework\Assert::assertSame(
            $this->user->getEmail(),
            filter_var($this->user->getEmail(), FILTER_VALIDATE_EMAIL)
        );
    }

    /**
     * @Then Email should be a unique email address
     */
    public function emailShouldBeAUniqueEmailAddress()
    {
        $isUnique = $this->userService->isEmailUnique($this->user->getEmail());

        PHPUnit\Framework\Assert::assertTrue($isUnique);
    }

    /**
     * @Then Password should be a minimum :length digit
     * @param int $length
     */
    public function passwordShouldBeAMinimumDigit(int $length)
    {
        PHPUnit\Framework\Assert::assertGreaterThanOrEqual(
            6,
            strlen($length)
        );
    }

    /**
     * @Then Token should be generated by provided user information
     */
    public function tokenShouldBeGeneratedByProvidedUserInformation()
    {
        $token = $this->tokenService->generate($this->user->getEmail());

        PHPUnit\Framework\Assert::assertNotEmpty($token);
    }

    /**
     * @Then All information of the user should be saved to database
     */
    public function allInformationOfTheUserShouldBeSavedToDatabase()
    {
        $this->registrationResponse = $this->userRepository->save($this->user);
    }

    /**
     * @Then User should receive an e-mail notification that states that user has been successfully registered
     */
    public function userShouldReceiveAnEMailNotificationThatStatesThatUserHasBeenSuccessfullyRegistered()
    {
        $result = $this->emailService->send($this->emailService, "You have been registered successfully");

        PHPUnit\Framework\Assert::assertTrue($result);
    }

    /**
     * @Then I send a request to registration action
     */
    public function iSendARequestToRegistrationAction()
    {
        PHPUnit\Framework\Assert::assertNotNull($this->user);
    }

    /**
     * @Then System should return user Id and the Token after registration
     */
    public function systemShouldReturnUserIdAndTheTokenAfterRegistration()
    {
        PHPUnit\Framework\Assert::assertNotEmpty($this->registrationResponse->getId());
        PHPUnit\Framework\Assert::assertNotEmpty($this->registrationResponse->getToken());
    }
}